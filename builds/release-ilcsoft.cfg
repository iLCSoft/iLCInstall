import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions-HEAD.py" )
execfile( versions_file )

# installation directory
if not 'ilcsoft_install_dir' in dir():
    if not 'ilcsoft_install_prefix' in dir():
        # default install prefix
        ilcsoft_install_prefix = "$HOME/ilcsoft"

    
ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )

ilcsoft = ILCSoft( ilcsoft_install_dir )

if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]=os.environ['CXX']
ilcsoft.env["CC"]=os.environ['CC']
ilcsoft.env["FC"]=os.environ['FC']
#
ilcsoft.envcmake['CMAKE_CXX_FLAGS']= CMAKE_CXX_FLAGS
ilcsoft.envcmake["Boost_NO_BOOST_CMAKE"] = 'ON'
#

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="OFF"


ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
ilcsoft.downloadType = "svn"


###########################################################

flavour="slc6"
gcc_version="48"
build_option="dbg"

ilcsoft.use( MySQL("/cvmfs/clicdp.cern.ch/software/MySQL/5.7.13/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( FastJet( "/cvmfs/clicdp.cern.ch/software/FastJet/3.2.0/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( XercesC( "/cvmfs/clicdp.cern.ch/software/Xerces-C/3.1.3/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( Geant4( "/cvmfs/clicdp.cern.ch/software/Geant4/10.01.p03/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( ROOT( "/cvmfs/clicdp.cern.ch/software/ROOT/6.06.04/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( CLHEP( "/cvmfs/clicdp.cern.ch/software/CLHEP/2.2.0.4/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( GSL( "/cvmfs/clicdp.cern.ch/software/GSL/2.1/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( LCIO( "/cvmfs/clicdp.cern.ch/software/LCIO/2.7.1/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( Boost( "/cvmfs/clicdp.cern.ch/software/Boost/1.61.0/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( QT( "/cvmfs/clicdp.cern.ch/software/Qt/4.8.7/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))
ilcsoft.use( CMake( "/cvmfs/clicdp.cern.ch/software/CMake/3.5.2/x86_64-" + flavour + "-gcc" + gcc_version + "-" + build_option ))

ilcsoft.install( ILCUTIL( ILCUTIL_version ))
ilcsoft.install( CondDBMySQL( CondDBMySQL_version ))

ilcsoft.install( CED( CED_version ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'


ilcsoft.install( LCCD( LCCD_version ))

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"]='OFF'

ilcsoft.install( MarlinPKG( "MarlinDD4hep", MarlinDD4hep_version ))
ilcsoft.module("MarlinDD4hep").download.supportedTypes = ["GitHub"]
ilcsoft.module("MarlinDD4hep").addDependency( [ 'Marlin', 'DD4hep', 'Root'] )

ilcsoft.install( MarlinPKG( "DDMarlinPandora", DDMarlinPandora_version ))
ilcsoft.module("DDMarlinPandora").download.supportedTypes = ["GitHub"]
ilcsoft.module("DDMarlinPandora").addDependency( [ 'Marlin', 'MarlinUtil', 'DD4hep', 'ROOT', 'PandoraPFANew'] )


ilcsoft.install( MarlinUtil( MarlinUtil_version ))

ilcsoft.install( MarlinReco( MarlinReco_version ))


ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))

ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["LC_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["EXAMPLE_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["ROOT_DIR"]='${ROOTSYS}/etc/cmake'


ilcsoft.install( MarlinPandora( MarlinPandora_version ))

ilcsoft.install( LCFIVertex( LCFIVertex_version ))
ilcsoft.module( "LCFIVertex" ).envcmake["BOOST_ROOT"] = Boost_path

ilcsoft.install( CEDViewer( CEDViewer_version )) 

ilcsoft.install( Overlay( Overlay_version ))  

ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
ilcsoft.module("MarlinFastJet").download.supportedTypes = ["GitHub"]
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
ilcsoft.module("LCTuple").download.supportedTypes = ["GitHub"]
ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin', 'ROOT'] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
ilcsoft.module("MarlinKinfit").download.supportedTypes = ["GitHub"]
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinTrk( MarlinTrk_version ))
ilcsoft.install( KiTrack( KiTrack_version ))
ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
ilcsoft.module("MarlinTrkProcessors").download.supportedTypes = ["GitHub"]
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )

ilcsoft.install( MarlinPKG( "ILDPerformance", ILDPerformance_version ))
ilcsoft.module("ILDPerformance").download.supportedTypes = ["GitHub"]
ilcsoft.module("ILDPerformance").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

#-- for convenience also include the HEAD version of ILDconfig
ilcsoft.install( ConfigPKG( "ILDConfig", ILDConfig_version ))
ilcsoft.module("ILDConfig").download.supportedTypes = ["GitHub"]
ilcsoft.module("ILDConfig").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

ilcsoft.install( MarlinPKG( "Clupatra", Clupatra_version ))
ilcsoft.module("Clupatra").download.supportedTypes = ["GitHub"]
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "Physsim", Physsim_version ))
ilcsoft.module("Physsim").download.root="physsim"
ilcsoft.module("Physsim").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "FCalClusterer", FCalClusterer_version ))
ilcsoft.module("FCalClusterer").download.supportedTypes = ["GitHub"]
ilcsoft.module("FCalClusterer").download.gituser="FCALSW"
ilcsoft.module("FCalClusterer").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

#ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
#ilcsoft.module("LCFIPlus").download.supportedTypes = ["GitHub"]
#ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
ilcsoft.module("ForwardTracking").download.supportedTypes = ["GitHub"]
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )


ilcsoft.install( PathFinder( PathFinder_version ))
ilcsoft.install( MarlinTPC( MarlinTPC_version ))

ilcsoft.install( BBQ( BBQ_version ))


ilcsoft.install( Garlic( Garlic_version ))



ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( KalTest( KalTest_version ))
ilcsoft.install( KalDet( KalDet_version ))

ilcsoft.install( GBL ( GBL_version ) )


# DD4hep
ilcsoft.install( DD4hep( DD4hep_version )) 
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEAR"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_BOOST"]=1
ilcsoft.module("DD4hep").envcmake["BOOST_ROOT"] = Boost_path
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_CXX11"] = 'ON'


ilcsoft.install( lcgeo( lcgeo_version )) 

ilcsoft.install( aidaTT( aidaTT_version )) 

ilcsoft.install( DDKalTest( DDKalTest_version ))

#ilcsoft.install( DD4hepExamples ( DD4hepExamples_version ))

ilcsoft.install( GEAR( GEAR_version ))
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'

