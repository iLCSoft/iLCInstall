#!/usr/bin/env python
import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions-HEAD.py" )
execfile( versions_file )

ilcsoft_install_dir = ilcsoft_install_prefix

ilcsoft = ILCSoft( ilcsoft_install_dir )

if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]=os.environ['CXX']
ilcsoft.env["CC"]=os.environ['CC']
ilcsoft.envcmake["USE_CXX11"]='ON'

#
ilcsoft.envcmake['CMAKE_CXX_FLAGS']= CMAKE_CXX_FLAGS
ilcsoft.envcmake["Boost_NO_BOOST_CMAKE"] = 'ON'
#

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="OFF"


ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Release"
ilcsoft.downloadType = "GitHub"


###########################################################

flavour="slc6"
compiler_version = os.getenv("COMPILER_VERSION", "gcc62")
print os.environ.get('COMPILER_VERSION')
build_option="opt"

ilcsoft.use( MySQL("/cvmfs/clicdp.cern.ch/software/MySQL/5.7.16/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( FastJet( "/cvmfs/clicdp.cern.ch/software/FastJet/3.2.1/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( XercesC( "/cvmfs/clicdp.cern.ch/software/Xerces-C/3.1.4/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( Geant4( "/cvmfs/clicdp.cern.ch/software/Geant4/10.02.p02/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( ROOT( "/cvmfs/clicdp.cern.ch/software/ROOT/6.08.00/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( CLHEP( "/cvmfs/clicdp.cern.ch/software/CLHEP/2.3.1.1/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( GSL( "/cvmfs/clicdp.cern.ch/software/GSL/2.2.1/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))

#ilcsoft.use( LCIO( "/cvmfs/clicdp.cern.ch/software/LCIO/2.7.2/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.install( LCIO( "HEAD" ))
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'
ilcsoft.module("LCIO").download.type="GitHub"
ilcsoft.module("LCIO").download.gituser="iLCSoft"
ilcsoft.module("LCIO").download.gitrepo="LCIO"

ilcsoft.use( Boost( "/cvmfs/clicdp.cern.ch/software/Boost/1.62.0/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( CMake( "/cvmfs/clicdp.cern.ch/software/CMake/3.6.2/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( Eigen( "/cvmfs/clicdp.cern.ch/software/Eigen/3.3.0/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))
ilcsoft.use( ninja( "/cvmfs/clicdp.cern.ch/software/Ninja/1.7.1/x86_64-" + flavour + "-" + compiler_version + "-" + build_option ))

ilcsoft.install( ILCUTIL( ILCUTIL_version ))

ilcsoft.install( CondDBMySQL( CondDBMySQL_version ))

ilcsoft.install( CED( CED_version ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'
ilcsoft.module("CED").envcmake['CMAKE_SKIP_RPATH']='TRUE'

ilcsoft.install( LCCD( LCCD_version ))

ilcsoft.install( Marlin( Marlin_version ))

ilcsoft.install( MarlinPKG( "MarlinDD4hep", "HEAD" ))
ilcsoft.module("MarlinDD4hep").addDependency( [ 'Marlin', 'DD4hep', 'Root', 'DDKalTest'] )

ilcsoft.install( MarlinPKG( "DDMarlinPandora", DDMarlinPandora_version ))
ilcsoft.module("DDMarlinPandora").addDependency( [ 'Marlin', 'MarlinUtil', 'DD4hep', 'ROOT', 'PandoraPFANew','AIDA'] )
ilcsoft.module("DDMarlinPandora").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error -std=c++11'

ilcsoft.install( MarlinUtil( MarlinUtil_version ))

ilcsoft.install( MarlinReco( MarlinReco_version ))
ilcsoft.module("MarlinReco").envcmake["MARLINRECO_FORTRAN"]='OFF'
ilcsoft.module("MarlinReco").addDependency( [ 'Marlin', 'MarlinUtil', 'MarlinKinFit', 'DD4hep', 'ROOT', 'AIDA'] )

ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))

ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["LC_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["EXAMPLE_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["ROOT_DIR"]='${ROOTSYS}/etc/cmake'
ilcsoft.module("PandoraPFANew").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error -std=c++11'


ilcsoft.install( MarlinPandora( MarlinPandora_version ))
ilcsoft.module("MarlinPandora").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error -std=c++11'

ilcsoft.install( LCFIVertex( LCFIVertex_version ))
ilcsoft.module( "LCFIVertex" ).envcmake["BOOST_ROOT"] = Boost_path

ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
ilcsoft.module("LCFIPlus").download.type="GitHub"
ilcsoft.module("LCFIPlus").download.gituser="lcfiplus"
ilcsoft.module("LCFIPlus").download.gitrepo="LCFIPlus"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

ilcsoft.install( CEDViewer( CEDViewer_version )) 
ilcsoft.module("CEDViewer").envcmake['CMAKE_SKIP_RPATH']='TRUE'

ilcsoft.install( Overlay( Overlay_version ))  

ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin', 'ROOT'] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinTrk( MarlinTrk_version ))

ilcsoft.install( KiTrack( KiTrack_version ))

ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )

ilcsoft.install( MarlinPKG( "ILDPerformance", ILDPerformance_version ))
ilcsoft.module("ILDPerformance").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

ilcsoft.install( MarlinPKG( "ClicPerformance", ClicPerformance_version ))
ilcsoft.module("ClicPerformance").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT', 'MarlinTrk', 'AIDA', 'DD4hep'] )

ilcsoft.install( MarlinPKG( "ConformalTracking", ConformalTracking_version ))
ilcsoft.module("ConformalTracking").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT', 'MarlinTrk', 'AIDA', 'DD4hep'] )

ilcsoft.install( MarlinPKG( "Physsim", Physsim_version ))
ilcsoft.module("Physsim").download.type="svn"
ilcsoft.module("Physsim").download.root="physsim"
ilcsoft.module("Physsim").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "FCalClusterer", FCalClusterer_version ))
ilcsoft.module("FCalClusterer").download.supportedTypes = [ "GitHub" ]
ilcsoft.module("FCalClusterer").download.gituser = 'FCALSW'
ilcsoft.module("FCalClusterer").download.gitrepo = 'FCalClusterer'
ilcsoft.module("FCalClusterer").addDependency( [ 'DD4hep', 'GSL' ] )

ilcsoft.module("FCalClusterer").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )

ilcsoft.install( MarlinPKG( "Clupatra", Clupatra_version ))
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( PathFinder( PathFinder_version ))
ilcsoft.module("PathFinder").download.type="svn"

ilcsoft.install( BBQ( BBQ_version ))
ilcsoft.module("BBQ").download.type="svn"

ilcsoft.install( Garlic( Garlic_version ))
ilcsoft.module("Garlic").download.type="svn"

ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( KalTest( KalTest_version ))
ilcsoft.install( KalDet( KalDet_version ))

ilcsoft.install( GBL ( GBL_version ) )

ilcsoft.install( MarlinPKG( "LICH", LICH_version ))
ilcsoft.module("LICH").download.type="GitHub"
ilcsoft.module("LICH").download.gituser="danerdaner"
ilcsoft.module("LICH").download.gitrepo="LICH"
ilcsoft.module("LICH").addDependency( [ 'LCIO', 'ROOT', 'Marlin', 'MarlinUtil' ] )

# DD4hep
ilcsoft.install( DD4hep( DD4hep_version )) 
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEAR"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_BOOST"]=1
ilcsoft.module("DD4hep").envcmake["BOOST_ROOT"] = Boost_path
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_CXX11"] = 'ON'


ilcsoft.install( lcgeo( lcgeo_version ))

ilcsoft.install( aidaTT( aidaTT_version ))

ilcsoft.install( DDKalTest( DDKalTest_version ))


ilcsoft.install( GEAR( GEAR_version ))
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'

