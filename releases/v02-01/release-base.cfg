##############################################################################
#
# Configuration file for installing base-level tools of ILC Software v01-14
#
# This cfg file is part 1 of a 2 step installation procedure:
#
# Part 1 installs the so called "base-level" tools of the ilcsoft release
# (base-level tools are the tools which do not have dependencies and can
# therefore be 're-linked' from release to release
#
# base-level tools are typically installed to:
# /afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5/ # 64bit
# /afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/   # 32bit
#
# Part 2 is done with cfg file release_v01-09.cfg and installs the
# remaining software which has dependencies and therefore needs to
# be re-installed from release to release. Part 2 installation links
# to the packages installed with Part 1
# 
# ilcsoft releases are typically installed to:
# /afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5/v01-14 # 64bit
# /afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/v01-14   # 32bit
#
# Please do not forget to modify the directories in this cfg file
# according to your system !!
#
# Alternatively to the 2 step installation procedure you may choose to
# use the release_v01-14-scratch.cfg configuration file which installs
# all software in one single step. The only disadvantage is that future
# installations of new releases have to go into the same directory of the
# previous installation for being able to re-use the base-level tools of the
# old installation (or require significant changes in the configuration file)
#
# Author: F. Gaede, J. Engels, DESY
# Date: Jun 30, 2010
#
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions.py" )
execfile( versions_file )

# installation directory
if not 'ilcsoft_install_dir' in dir():
    if not 'ilcsoft_install_prefix' in dir():
        # default install prefix
        ilcsoft_install_prefix = "$HOME/ilcsoft"

    ilcsoft_install_dir = ilcsoft_install_prefix	
    #ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )

ilcsoft = ILCSoft( ilcsoft_install_dir )


# global options
if not ncores:
   ncores = 4

ilcsoft.env["MAKEOPTS"]="-j" + str(ncores)
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"

if( ilcsoft.os.isSL(4) ):
    ilcsoft.env["FC"]="g77"

#
#ilcsoft.envcmake['CMAKE_CXX_FLAGS']= CMAKE_CXX_FLAGS
ilcsoft.envcmake['USE_CXX11']=use_cpp11
#

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="ON"


ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.downloadType = "svn"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------

###########################################################



# ------ packages with no install support -------------
# need to be pre-installed on your system
if 'MySQL_path' in dir():
    ilcsoft.use( MySQL( MySQL_path ))
# -----------------------------------------------------




#----- configs ------------------------------------------------------
#ilcsoft.install( ConfigPKG( "StandardConfig", StandardConfig_version ))
#ilcsoft.module( "StandardConfig").download.root = "marlinreco"
#
#ilcsoft.install( ConfigPKG( "MokkaDBConfig", MokkaDBConfig_version ))
#ilcsoft.module( "MokkaDBConfig").download.root = "ilctools"
#
#ilcsoft.install( ConfigPKG( "LCFI_MokkaBasedNets", LCFI_MokkaBasedNets_version ))
#ilcsoft.module( "LCFI_MokkaBasedNets" ).download.root = "tagnet"
# -------------------------------------------------------------------


ilcsoft.install( ILCUTIL( ILCUTIL_version ))

ilcsoft.install( CondDBMySQL( CondDBMySQL_version ))

ilcsoft.install( CED( CED_version ))
# ---- optionally build the CED event display
# ---- requires GLUT and OpenGL installed on your system
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'

ilcsoft.install( FastJet( FastJet_version ))
ilcsoft.module("FastJet").fjcontrib_version=FastJetcontrib_version

# -- xercesc
ilcsoft.install( XercesC( XercesC_version ))

ilcsoft.install( Geant4( Geant4_version ))
geant4=ilcsoft.module("Geant4")
geant4.envcmake["GEANT4_INSTALL_DATA"]='ON'
geant4.envcmake["GEANT4_USE_SYSTEM_EXPAT"]='OFF' # ignored ??
geant4.envcmake["GEANT4_USE_SYSTEM_CLHEP"]='ON'
geant4.envcmake["GEANT4_USE_OPENGL_X11"]='ON'
geant4.envcmake["GEANT4_USE_QT"]='ON' # requires qt
if( use_cpp11 ):
    geant4.envcmake["GEANT4_BUILD_CXXSTD"]='c++11'

#geant4.envcmake["QT_QMAKE_EXECUTABLE"]=/path/to/qmake
if 'XERCESC_ROOT_DIR' in dir():
    geant4.envcmake["XERCESC_ROOT_DIR"]=XERCESC_ROOT_DIR
if 'XERCESC_INCLUDE_DIR' in dir() and 'XERCESC_LIBRARY' in dir():
    geant4.envcmake["GEANT4_USE_GDML"]='ON' # requires xerces-c
    geant4.envcmake["XERCESC_INCLUDE_DIR"]=XERCESC_INCLUDE_DIR
    geant4.envcmake["XERCESC_LIBRARY"]=XERCESC_LIBRARY

ilcsoft.install( ROOT( ROOT_version ))
ilcsoft.module("ROOT").download.type="wget"

ilcsoft.install( CLHEP( CLHEP_version ))
ilcsoft.install( GSL( GSL_version ))
ilcsoft.install( QT( QT_version ))

# cmake
ilcsoft.install( CMake( CMake_version ))

# end of configuration file

