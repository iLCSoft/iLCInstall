# this config file is actually python code, just to let emacs know: -*- mode: Python; -*-
##############################################################################
#
# Configuration file for installing EUTelescope 
#        and the required ILC Software Packages
#
# This config sets up a standalone installation
# (i.e. does not link to an existing AFS installation of ILCSoft)
# 
# You might want to change the following variables:
#
# To find ilcsoft's release-version.py with all default settings for package versions 
# (this is the version string in ilcinstall/releases/VERSION/release-versions.py)
# Set to 'auto' to search for latest version.
target_ilcinstall_version = "auto"
#
# Whether or not to create 32 bit binaries on 64bit systems:
# (32bit systems will automatically be switched to 32 bits)
force_32bit = False
#
##############################################################################


# --------- set up package versions with ilcsoft's defaults: ------------

import os, sys
import platform
from distutils.version import StrictVersion, LooseVersion

# read package versions from external file provided by ilcinstall
path_where_this_file_lives = os.path.dirname( config_file )
where_ilcinstall_lives = os.path.dirname(os.path.abspath(__file__))
versions_file = ""
if target_ilcinstall_version == "auto":
    # search for latest version in releases subdirectory
    latest = ""
    for name in os.listdir(os.path.join( where_ilcinstall_lives, "releases")):
        if os.path.isdir(os.path.join( where_ilcinstall_lives, "releases",name)):
            if latest:
                if LooseVersion(latest)<LooseVersion(name):
                    latest = name
            else:
                latest = name
    if latest:
        versions_file = os.path.join( where_ilcinstall_lives, "releases", latest,"release-versions.py" )
    else:
        print "Error: could not determine latest ILCSoft version!"
else:
    versions_file = os.path.join( where_ilcinstall_lives, "releases", target_ilcinstall_version,"release-versions.py" )

# the default versions file contructs a path using ilcsoft_afs_path[arch] 
# which fails if ilcsoft is not yet set up with this gcc version;
# therefore create fake entry here
ilcsoft_afs_path[arch] = ""
exec(compile(open(versions_file, "rb").read(), versions_file, "exec")) # !some settings are overwritten below: install dir, versions depending on distr.


# --------- determine install dir (OVERWRITING DEFAULT) ----------------------------------------------
# should be set by the user by setting the ILCSOFT environment variable
# e.g. "export ILCSOFT=~/ilcsoft"
if not os.environ.get('ILCSOFT') is None:
    ilcsoft_install_prefix = str(os.environ.get('ILCSOFT'))
else:
    ilcsoft_install_prefix = "/opt/ilcsoft"
ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )
ilcsoft = ILCSoft( ilcsoft_install_dir )
# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# -- overwrites setting in release-versions.py! --
ilcPath = ilcsoft_install_prefix

if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# --------- package versions and paths (distribution dependent) --------------------------
# access to platform parameters: 
# platform.dist()[0] (dist short name), platform.dist()[1] (version) platform.dist()[2] (version short name)

if platform.dist()[0] == "Ubuntu":
    CMake_path = "/usr" # link to cmake installed via package manager

# adjustments for the standalone installation:
Java_path = "/usr"
CERNLIB_path = "/usr"
XERCESC_ROOT_DIR = os.path.join(ilcPath , "xercesc/2.7.0") # xerces-c (needed by geant4 for gdml support - required by mokka)
GSL_path = "/usr"



# ------------------ global compiler options -----------------------------------------------

ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
if( ilcsoft.os.isSL(4) ):
    ilcsoft.env["FC"]="g77"

#--------- to build 32-bit mode on 64bit machines set force_32bit in the beginning of this file ---
if force_32bit or platform.machine() == "i386":
   ilcsoft.env["CXXFLAGS"]="-m32"
   ilcsoft.env["CFLAGS"]="-m32"
   ilcsoft.env["FFLAGS"]="-m32"
   ilcsoft.env["LDFLAGS"]="-m32"
   ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="ON"
#----------------------------------------------------------------

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="OFF"

#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
if Eutelescope_version == "HEAD":
    ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
else:
    ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Release"

ilcsoft.downloadType = "svn"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------


####################################################################
#
# the following tools are installed in afs:
#
# - for SL5 (32bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/
#
# - for SL5 (64bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5
#
# they can be linked from there or need to be installed on your system
#
####################################################################

#-------------------------------------------------------------------------
# prerequisites: installed versions of Java, geant4, cernlib and mysql:
#  -> modify according to your system !
#-------------------------------------------------------------------------

#  when using 'link' or 'use' please specify full path to installed package
#  or use the version installed in afs (ilcPath) 


# MySQL
#if 'MySQL_path' in dir():
#    ilcsoft.link( MySQL( MySQL_path ))

# Java
if 'Java_path' in dir():
    ilcsoft.use( Java( Java_path ))

# geant4
#if 'Geant4_path' in dir():
#    ilcsoft.use( Geant4 ( Geant4_path ))
#    if 'G4ENV_INIT_path' in dir():
#        ilcsoft.module("Geant4").env["G4ENV_INIT"] = G4ENV_INIT_path

# cernlib
#if 'CERNLIB_path' in dir():
#    ilcsoft.use( CERNLIB(  CERNLIB_path  ))


####################################################################

#----- core tools

#ilcsoft.install( Geant4( Geant4_version ))
#geant4=ilcsoft.module("Geant4")
#geant4.envcmake["GEANT4_INSTALL_DATA"]='ON'
#geant4.envcmake["GEANT4_USE_SYSTEM_EXPAT"]='OFF' # ignored ??
#geant4.envcmake["GEANT4_USE_SYSTEM_CLHEP"]='ON'
#geant4.envcmake["GEANT4_USE_OPENGL_X11"]='ON'
#geant4.envcmake["GEANT4_USE_QT"]='ON' # requires qt
#geant4.envcmake["QT_QMAKE_EXECUTABLE"]=/path/to/qmake
#if 'XERCESC_ROOT_DIR' in dir():
#    geant4.envcmake["XERCESC_ROOT_DIR"]=XERCESC_ROOT_DIR
#if 'XERCESC_INCLUDE_DIR' in dir() and 'XERCESC_LIBRARY' in dir():
    #geant4.envcmake["GEANT4_USE_GDML"]='ON' # requires xerces-c
    #geant4.envcmake["XERCESC_INCLUDE_DIR"]=XERCESC_INCLUDE_DIR
    #geant4.envcmake["XERCESC_LIBRARY"]=XERCESC_LIBRARY

ilcsoft.install( ILCUTIL( ILCUTIL_version ))

ilcsoft.install( LCIO( LCIO_version )) 
#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'
ilcsoft.module("LCIO").envcmake['INSTALL_JAR']='OFF'
#ilcsoft.module("LCIO").envcmake['ROOT_HOME']='${ROOTSYS}'

ilcsoft.install( GEAR( GEAR_version )) 
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'

#ilcsoft.install( KalTest( KalTest_version )) 

#ilcsoft.install( KalDet( KalDet_version )) 


#ilcsoft.install( CondDBMySQL( CondDBMySQL_version )) 
ilcsoft.install( LCCD( LCCD_version ))
ilcsoft.module("LCCD").envcmake['LCCD_CONDDBMYSQL']='OFF'

ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( GBL ( GBL_version ) )

ilcsoft.install( CED( CED_version ))
#ilcsoft.module("CED").envcmake['CED_SERVER']='ON'


ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 'OFF'

ilcsoft.install( MarlinUtil( MarlinUtil_version ))


#ilcsoft.install( Mokka( Mokka_version ))
#ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1 # FIXME: CAUSES TOO MUCH LIB DEPENDENCIES .... TO BE SOLVED !!

#----------  standard reco packages

#ilcsoft.install( MarlinReco( MarlinReco_version )) 

#ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))
#ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
#ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))
#ilcsoft.install( MarlinPandora( MarlinPandora_version ))


#ilcsoft.install( LCFIVertex( LCFIVertex_version ))

#ilcsoft.install( CEDViewer( CEDViewer_version ))

#ilcsoft.install( Overlay( Overlay_version ))

#ilcsoft.install( FastJet( FastJet_version ))
#ilcsoft.install( FastJetClustering( FastJetClustering_version ))

#ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
#ilcsoft.module("MarlinFastJet").download.root="marlinreco"
#ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

#ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
#ilcsoft.module("LCTuple").download.root="marlinreco"
#ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin', 'ROOT'] )

#ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
#ilcsoft.module("MarlinKinfit").download.root="marlinreco"
#ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

#ilcsoft.install( MarlinTrk( MarlinTrk_version ))
#ilcsoft.install( KiTrack( KiTrack_version ))
#ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))

#ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
#ilcsoft.module("MarlinTrkProcessors").download.root="marlinreco"
#ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )

#ilcsoft.install( MarlinPKG( "Clupatra", Clupatra_version ))
#ilcsoft.module("Clupatra").download.root="marlinreco"
#ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

#ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
#ilcsoft.module("LCFIPlus").download.root="marlinreco"
#ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

#ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
#ilcsoft.module("ForwardTracking").download.root="marlinreco"
#ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )


#----- config packages
#ilcsoft.install( ConfigPKG( "StandardConfig", StandardConfig_version  ))
#stdconf = ilcsoft.module( "StandardConfig")
#stdconf.download.root = "marlinreco"
#stdconf.env["STANDARDCONFIG"]=stdconf.installPath
#
#ilcsoft.install( ConfigPKG( "MokkaDBConfig", MokkaDBConfig_version )) 
#mokkadbconf = ilcsoft.module( "MokkaDBConfig")
#mokkadbconf.download.root = "ilctools"
#mokkadbconf.envorder=["MOKKADBCONFIG"]
#mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
#mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
#mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )
#
#ilcsoft.install( ConfigPKG( "LCFI_MokkaBasedNets", LCFI_MokkaBasedNets_version ))
#lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
#lcfinets.download.root = "tagnet"
#lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath



#---------test beam packages 

ilcsoft.install( Eutelescope( Eutelescope_version ))
ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']= Eudaq_version
ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']= Millepede2_version


#ilcsoft.install( PathFinder( PathFinder_version ))
#ilcsoft.install( MarlinTPC( MarlinTPC_version ))

#ilcsoft.install( BBQ( BBQ_version ))

#ilcsoft.install( Druid( Druid_version ))

#ilcsoft.install( Garlic( Garlic_version ))

#------- external packages

ilcsoft.install( ROOT( ROOT_version ))
ilcsoft.module("ROOT").download.type="wget"

ilcsoft.install( CLHEP( CLHEP_version))

ilcsoft.use( GSL( GSL_path )) 

#ilcsoft.install( QT( QT_version ))
#ilcsoft.use( QT( QT_path ))

#-------------------------------------------------------------------


# cmake
if 'CMake_path' in dir():
    ilcsoft.use( CMake( CMake_path  ))
else:
    ilcsoft.install( CMake( CMake_version  ))

# end of configuration file

