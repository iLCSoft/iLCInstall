#################################################################
# Configuration file for iLCSoft nightly builds @ DESY
#################################################################



# read package versions for base tools from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "nightly_builds/release-versions.py" )
execfile( versions_file )

# ILCSoft( "install path for ILC software")
ilcsoft = ILCSoft("/scratch/nbuilds/"+date_iso8601+"/"+config_file_basename)
#ilcsoft = ILCSoft("/nfs/dust/ilc/user/voutsina/testarea/testnightly/"+date_iso8601+"/"+config_file_basename)

# mail adresses for sending nightly build output
mail_addresses=[ "georgios.voutsinas@desy.de", "frank.gaede@desy.de" ]

ilcPath = "/afs/desy.de/project/ilcsoft/sw/x86_64_gcc44_sl6/"

#----- global variables -----------------------------------------

# download settings
#-----------------------------------------------
ilcsoft.downloadType = "svn-desy"
#-----------------------------------------------

# additional make options
#-----------------------------------------------
ilcsoft.env["MAKEOPTS"]="-j 4"
#ilcsoft.env["MAKEOPTS"]="VERBOSE=1"
ilcsoft.envcmake['CMAKE_BUILD_TYPE']='Debug'
ilcsoft.envcmake['INSTALL_DOC']='OFF'
ilcsoft.envcmake["CMAKE_VERBOSE_MAKEFILE"]=1
ilcsoft.nightlyBuild=True
ilcsoft.nightlyTargets=['NightlyStart', 'NightlyConfigure', 'NightlyBuild', 'install', 'NightlyTest', 'NightlySubmit']
#-----------------------------------------------

# enable tests (ctest)
ilcsoft.makeTests=True

# choose compilers
#-----------------------------------------------
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
#-----------------------------------------------

# compiler flags
#-----------------------------------------------
ilcsoft.env["LDFLAGS"]="-Wl,--no-undefined"
ilcsoft.envcmake['CMAKE_CXX_FLAGS']='-Wall -ansi -pedantic -Wno-long-long'
'''
 # run the following when using c++11
 source /afs/cern.ch/sw/lcg/external/gcc/4.8.1/x86_64-slc6-gcc48-opt/setup.sh
 export PATH=/afs/cern.ch/sw/lcg/external/Python/2.7.4/x86_64-slc6-gcc48-opt/bin/:$PATH
 export LD_LIBRARY_PATH=/afs/cern.ch/sw/lcg/external/Python/2.7.4/x86_64-slc6-gcc48-opt/lib/:$LD_LIBRARY_PATH
'''
#-----------------------------------------------

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/blah/blah"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/blub/blub"
#-----------------------------------------------

#ilcsoft.envcmake["FORTRAN_LIBRARY_SEARCH_PATH"]="/opt/gcc-4.4.0/lib64/"
ilcsoft.envcmake["FORTRAN_LIBRARY_SEARCH_PATH"]="/afs/cern.ch/sw/lcg/contrib/gcc/4.8.1/x86_64-slc6-gcc48-opt/lib64"
#----------------------------------------------------------------

ilcsoft.envcmake["USE_CXX11"]="OFF"

# set the boost path 
Boost_path = "/afs/desy.de/project/ilcsoft/sw/boost/1.58.0"


# Marlin + plugins
ilcsoft.install( Marlin( "HEAD" ))
#ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 1

ilcsoft.install( MarlinPKG( "MarlinDD4hep", "HEAD" ))
ilcsoft.module("MarlinDD4hep").download.root="marlin"
ilcsoft.module("MarlinDD4hep").addDependency( [ 'Marlin', 'DD4hep', 'Root', 'DDKalTest'] )


ilcsoft.install( MarlinUtil( "HEAD" ))
ilcsoft.install( Overlay( "HEAD" ))
ilcsoft.install( CEDViewer( "HEAD" ))
ilcsoft.install( MarlinReco( "HEAD" ))
#ilcsoft.module("MarlinReco").envcmake["MARLINRECO_FORTRAN"]="OFF"

ilcsoft.install( PandoraPFANew( "HEAD" ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["LC_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["EXAMPLE_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["ROOT_DIR"]='${ROOTSYS}/etc/cmake'
ilcsoft.install( PandoraAnalysis( "HEAD" ))

ilcsoft.install( MarlinPandora( "HEAD" ))
ilcsoft.module("MarlinPandora").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error'


ilcsoft.install( LCFIVertex( "HEAD" ))
ilcsoft.module( "LCFIVertex" ).envcmake["BOOST_ROOT"] = Boost_path

ilcsoft.install( MarlinTPC( "HEAD" ))
#ilcsoft.install( Eutelescope( "HEAD" )) # FIXME
#ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='tags/V03-03-00'

ilcsoft.install( MarlinPKG( "MarlinFastJet", "HEAD" ))
ilcsoft.module("MarlinFastJet").download.root="marlinreco"
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )


ilcsoft.install( MarlinTrk( "HEAD" ))
ilcsoft.install( KiTrack( "HEAD" ))
ilcsoft.install( KiTrackMarlin( "HEAD" ))

ilcsoft.install( MarlinPKG( "ILDPerformance", "HEAD" ))
ilcsoft.module("ILDPerformance").download.root="marlinreco"
ilcsoft.module("ILDPerformance").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", "HEAD" ))
ilcsoft.module("MarlinTrkProcessors").download.root="marlinreco"
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk'] )

ilcsoft.install( MarlinPKG( "Clupatra", "HEAD" ))
ilcsoft.module("Clupatra").download.root="marlinreco"
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "Physsim", "HEAD" ))
ilcsoft.module("Physsim").download.root="physsim"
ilcsoft.module("Physsim").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "FCalClusterer", "HEAD" ))
ilcsoft.module("FCalClusterer").download.root="FCAL/Software"
ilcsoft.module("FCalClusterer").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", "HEAD" ))
ilcsoft.module("MarlinKinfit").download.root="marlinreco"
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinPKG( "LCFIPlus", "HEAD" ))
ilcsoft.module("LCFIPlus").download.type="GitHub"
ilcsoft.module("LCFIPlus").download.gituser="lcfiplus"
ilcsoft.module("LCFIPlus").download.gitrepo="LCFIPlus"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex', 'Boost'] )

ilcsoft.install( MarlinPKG( "ForwardTracking", "HEAD" ))
ilcsoft.module("ForwardTracking").download.root="marlinreco"
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk', 'KiTrackMarlin'] )

#ilcsoft.install( MarlinPKG( "DDMarlinPandora", "HEAD" ))
#ilcsoft.module("DDMarlinPandora").download.root="marlinreco"
#ilcsoft.module("DDMarlinPandora").addDependency( [ 'Marlin', 'DD4hep', 'ROOT', 'MarlinUtil', 'PandoraPFANew', 'MarlinTrk'] )


# ilcsoft core packages
#ilcsoft.install( ILCUTIL(  ilcPath + "ilcutil/" + ILCUTIL_version ) ))
ilcsoft.install( KalTest( "HEAD" ))
ilcsoft.module("KalTest").envcmake['BUILD_EXAMPLES']='ON'
ilcsoft.install( KalDet( "HEAD" ))
ilcsoft.install( Garlic( "HEAD" ))
ilcsoft.install( Druid( "HEAD" ))
ilcsoft.install( CED( "HEAD" ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'

ilcsoft.install( LCIO( "HEAD" ))
#ilcsoft.module("LCIO").envcmake["BUILD_WITH_DCAP"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_ROOTDICT"]="OFF"
ilcsoft.module("LCIO").envcmake["BUILD_LCIO_EXAMPLES"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_F77_TESTJOBS"]="ON"
#ilcsoft.module("LCIO").envcmake["USE_CXX11"]="OFF"

ilcsoft.install( GEAR( "HEAD" ))
ilcsoft.module("GEAR").envcmake['BUILD_TGEO']='ON'
ilcsoft.install( RAIDA( "HEAD" ))
ilcsoft.install( LCCD( "HEAD" ))
ilcsoft.install( CondDBMySQL( "HEAD" ))
ilcsoft.install( PathFinder( "HEAD" ))
ilcsoft.install( BBQ( "HEAD" ))

#----- configs ------------------------------------------------------

ilcsoft.install( ConfigPKG( "ILDConfig", "HEAD" ))
ildconf = ilcsoft.module( "ILDConfig")
ildconf.download.root = "marlinreco"
ildconf.env["ILDCONFIG"]=ildconf.installPath
# -------------------------------------------------------------------

ilcsoft.install( DD4hep( "HEAD" )) 
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEAR"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_BOOST"]=1
ilcsoft.module("DD4hep").envcmake["BOOST_ROOT"] = Boost_path

ilcsoft.install( DD4hepExamples( "HEAD" )) 

ilcsoft.install( lcgeo( "HEAD" )) 

ilcsoft.install( aidaTT( "HEAD" )) 
ilcsoft.install( GBL ( "HEAD" ) )

ilcsoft.install( DDKalTest( "HEAD" )) 

ilcsoft.install( Mokka( "HEAD" ))
ilcsoft.module("Mokka").envcmake['WITH_GEANT4_TCSH_UI_ONLY']='OFF'


ilcsoft.link( XercesC( ilcPath + "xercesc/" + XercesC_version ))
ilcsoft.link( FastJet( ilcPath + "FastJet/" + FastJet_version ))
ilcsoft.link( ROOT( ilcPath + "root/" + ROOT_version ))
ilcsoft.link( CLHEP( ilcPath + "CLHEP/" + CLHEP_version ))
ilcsoft.link( GSL( ilcPath + "gsl/" + GSL_version ))
ilcsoft.link( QT( ilcPath + "QT/" + QT_version ))
ilcsoft.link( Geant4( ilcPath + "geant4/" + Geant4_version ))
ilcsoft.use( CERNLIB( ilcPath + "cernlib/2006" ))
ilcsoft.link( MySQL( MySQL_path ))
ilcsoft.link( ILCUTIL( ilcPath + "ilcutil/" + ILCUTIL_version ))

ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version ))

# use pe-installed boost
ilcsoft.use( Boost( Boost_path ) )

# Java
#ilcsoft.use( Java( ilcPath + "java/1.6.0" ))

# end of configuration file

